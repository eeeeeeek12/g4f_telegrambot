import configparser
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.enums import ParseMode
from aiogram import F
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import g4f
import json

cfg = configparser.ConfigParser()
cfg.read('config.ini')
API_token = cfg['g']['api']

bot = Bot(token=API_token)
dp = Dispatcher()

# CREATE NEW USER'S CONTEXT FILE (OR CLEAR CONTEXT)
def newcontext(userID):
    with open(f'contexts\\{userID}.json', 'w', encoding="utf-8") as file:
        standart_context = []
        data = json.dumps(standart_context)
        file.write(data)

# GET USER'S CONTEXT
def readcontext(userID):
    try:
        with open(f'contexts\\{userID}.json', encoding="utf-8") as file:
            data = json.load(file)
        return data # list
        
    except Exception as exc:
        newcontext(userID)
        readcontext(userID)

# WRITE NEW MESSAGES TO USER'S CONTEXT
def writecontext(userID, new_prompt, answer_to_new_prompt):
    try:
        with open(f'contexts//{userID}.json', encoding="utf-8") as file:
            data = json.load(file) # list
        
        data.append(new_prompt)
        data.append({'role' : 'assistant', 'content' : answer_to_new_prompt})
        
        with open(f'contexts//{userID}.json', 'w', encoding="utf-8") as file:
            r = json.dumps(data)
            file.write(r)
            
    except Exception as exc:
        newcontext(userID)
        readcontext(userID)

# /start
@dp.message(F.text, Command('start'))
async def start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å"))
    builder.add(types.KeyboardButton(text="üÖ∞Ô∏è –ê–∫–∫–∞—É–Ω—Ç"))
    builder.add(types.KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"))
    builder.adjust(3)

    newcontext(message.from_user.id)

    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPT –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Ç–æ–±–æ–π. –Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∏–¥—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.', reply_markup=builder.as_markup(resize_keyboard=True))

# /cc
@dp.message(F.text, Command('cc'))
async def cc(message: types.Message):
    newcontext(message.from_user.id)
    await message.answer('üóë –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.')

@dp.message(F.text)
async def text_message(message:types.Message):
    if message.text[0] == '/':
        await message.answer('‚ùî –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

    elif message.text == 'üóë –û—á–∏—Å—Ç–∏—Ç—å':
        newcontext(message.from_user.id)
        await message.answer('üóë –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.')

    elif message.text == 'üÖ∞Ô∏è –ê–∫–∫–∞—É–Ω—Ç':
        await message.answer(f'üÖ∞Ô∏è –ê–∫–∫–∞—É–Ω—Ç\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –∞—Å–±–æ–ª—é—Ç–Ω–æ –±–µ—Å–ª–ø–∞—Ç–Ω–æ –∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\n\n–¢–≤–æ–π ID: <code>{message.chat.id}</code>', parse_mode = ParseMode.HTML)

    elif message.text == '‚ùì –ü–æ–º–æ—â—å':
        await message.answer(f'''‚ùì –ü–æ–º–æ—â—å

–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º.
–ï—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏–≤ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.

/start
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/cc
–°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    
–°–æ–∑–¥–∞–ª –±–æ—Ç–∞ –≤–µ–ª–∏–∫–∏–π –∏ –º–æ–≥—É—á–∏–π [mksklf](https://t.me/mksklf)''', parse_mode = ParseMode.MARKDOWN, disable_web_page_preview=True)

    else:
        messy = await message.reply('üí¨ –û–∂–∏–¥–∞–π—Ç–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...')
    
        try:
            NEW_PROMPT = {"role": "user", "content": message.text}
            
            CONTEXT = readcontext(message.from_user.id)
                
            response = g4f.ChatCompletion.create(
                model=g4f.models.default,
                provider=g4f.Provider.You,
                messages=[
                        *CONTEXT,
                        NEW_PROMPT
                    ],
                stream=False,
                web_search=True
                )
            
            abz = response.split('\n\n')

            abz2 = []
            c = False
            for i in abz:
                if i[:3] == '```':
                    if c:
                        c = False
                    else:
                        c = True
                    abz2.append(i)
                else:
                    if not c:
                        i = i.replace('**', '*')
                        abz2.append(i)
                    else:
                        abz2.append(i)

            response = '\n\n'.join(abz2)

            messy = await bot.edit_message_text(
                text = response,
                chat_id = message.chat.id,
                message_id = messy.message_id,
                disable_web_page_preview=True,
                parse_mode = ParseMode.MARKDOWN
            )

            writecontext(message.from_user.id, NEW_PROMPT, response)
                        
        except Exception as exc:
            print(exc)
            messy = await bot.edit_message_text(
                text = f'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.',
                chat_id = message.chat.id,
                message_id = messy.message_id,
                parse_mode = ParseMode.MARKDOWN
            )

async def main():
    await dp.start_polling(bot, timeout=200)

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())